name: Docker Builds
on:
  push:
    branches: [main]
    paths:
      - 'apps/**'
      - 'libs/**'
  workflow_dispatch:
  pull_request:

permissions:
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: ['api', 'todo-list', 'timer', 'records']
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
        with:
          version: 10.11.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push affected Docker images
        run: |
          affected_apps=$(npx nx show projects --affected --type=app --base=origin/main)
          if [[ " $affected_apps " == *" api "* ]]; then
            echo "Building and pushing Docker image for api"
            npx nx docker-build api --push
          else
            echo "No changes detected for api, skipping build."
          fi

      # npx nx docker-build ${{ matrix.app }}

      # - name: Identify Affected Apps
      #   id: affected
      #   run: |
      #     APPS=$(npx nx affected:apps --base=origin/main --head=HEAD --plain)
      #     echo "affected_apps=$APPS"

      # - name: Build and Push Images
      #   run: |
      #     if [ -z "${{ steps.affected.outputs.affected_apps }}" ]; then
      #       echo "No affected apps found, skipping build."
      #     else
      #       if app in ${{ steps.affected.outputs.affected_apps }}; then
      #         echo "Building and pushing Docker image for $app"
      #       done
      #     fi

      # npx nx docker-build $app --push
      # uses: docker/build-push-action@v5
      # with:
      #   context: .
      #   file: ./Dockerfile
      #   platforms: linux/amd64,linux/arm64
      #   push: true
      #   tags: |
      #     user/app:${{ github.sha }}
      #     user/app:latest
      #   build-args: |
      #     APPS=${{ steps.affected.outputs.affected_apps }}

      # - name: Build and push affected Docker images
      #   run: npx nx affected --target=docker-build --base=origin/main --select=projects

      # affected=$(npx nx show projects --affected --target=docker-build --base=origin/main --select=projects)
      # if ${{ matrix.app }} in $affected; then
      #   npx nx docker-build ${{ matrix.app }}
      # else
      #   echo "No changes detected for ${{ matrix.app }}, skipping build."
      # fi

      # affected=$(npx nx show projects --affected --target=docker-build --base=origin/main --select=projects)
      # for project in $affected; do
      #   npx nx docker-build $project
      # done

      # docker buildx build \
      #   -f "apps/$project/Dockerfile" \
      #   --tag "mcesarczyk/$project:latest" \
      #   --push .

      # run: |
      #   npx nx affected --target=docker-build \
      #     --projects=${{ matrix.app }} \
      #     --base=origin/main \
      #     --parallel=4 \
      #     --platform=linux/amd64

      # - name: Identify Affected Apps
      #   id: affected
      #   run: |
      #     APPS=$(npx nx affected:apps --base=origin/main --head=HEAD --plain)
      #     echo "affected_apps=$APPS" >> $GITHUB_OUTPUT

      # - name: Build and Push Images
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: .
      #     file: ./Dockerfile
      #     platforms: linux/amd64,linux/arm64
      #     push: true
      #     tags: |
      #       user/app:${{ github.sha }}
      #       user/app:latest
      #     build-args: |
      #       APPS=${{ steps.affected.outputs.affected_apps }}

      # - name: Build andPush Docker images
      #   run: |
      #     npx nx docker-build api

      # npx nx docker-build $project --push
      # - name: Identify Affected Apps
      #   id: affected
      #   run: |
      #     APPS=$(npx nx affected:apps --base=origin/main --head=HEAD --plain)
      #     echo "affected_apps=$APPS" >> $GITHUB_OUTPUT

      # - name: Build Docker images
      #   run: |
      #     npx nx docker-build ${{ matrix.app }} \
      #       --platform=linux/amd64 \
      #       --push=false \
      #       --tags=ghcr.io/your-org/your-repo/${{ matrix.app }}:latest
      #   env:
      #     NX_CLOUD_DISTRIBUTED_EXECUTION: false

      # - name: Build and Push Images
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: .
      #     file: ./Dockerfile
      #     platforms: linux/amd64,linux/arm64
      #     push: true
      #     tags: |
      #       user/app:${{ github.sha }}
      #       user/app:latest
      #     build-args: |
      #       APPS=${{ steps.affected.outputs.affected_apps }}
